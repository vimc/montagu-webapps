package org.vaccineimpact.api

import me.ntrrgc.tsGenerator.ClassTransformer
import me.ntrrgc.tsGenerator.TypeScriptGenerator
import me.ntrrgc.tsGenerator.camelCaseToSnakeCase
import org.vaccineimpact.api.models.*
import java.io.File
import java.time.LocalDate
import java.time.LocalDateTime
import kotlin.reflect.KClass
import kotlin.reflect.KProperty
import kotlin.system.exitProcess

fun main(args: Array<String>)
{
    if (args.size != 1)
    {
        println("Please specify the output path as the single command line parameter.")
        println("Output path should be the path to a .ts file.")
        exitProcess(-1)
    }
    else
    {
        val outputPath = args.first()
        println("Generating TypeScript model interfaces and storing in $outputPath")

        val generator = TypeScriptGenerator(
                rootClasses = setOf(
                        Scenario::class,
                        TouchstoneStatus::class,
                        Touchstone::class,
                        ModellingGroup::class,
                        Responsibilities::class,
                        Result::class,
                        Disease::class,
                        CoverageSet::class,
                        ScenarioAndCoverageSets::class,
                        ScenarioTouchstoneAndCoverageSets::class
                ),
                mappings = mapOf(
                        LocalDateTime::class to "Date",
                        LocalDate::class to "Date"
                ),
                ignoreSuperclasses = setOf(Iterable::class, HasKey::class),
                classTransformers = listOf(MyClassTransformer),
                addExportStatements = true,
                enumTransformer = { klass, value -> value.toString().toLowerCase().replace('_', '-') }
        )
        val text = "// Code generated by a tool.\n// Run `npm run generate-models` to regenerate\n\n${generator.definitionsText}"
        println()
        File(outputPath).writeText(text)
    }
}

object MyClassTransformer : ClassTransformer
{
    override fun transformPropertyName(propertyName: String, property: KProperty<*>, klass: KClass<*>): String
    {
        return camelCaseToSnakeCase(propertyName)
    }
}